import React, { useState, useMemo } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from 'recharts';

const PortfolioCalculator = () => {
  const [inputs, setInputs] = useState({
    hysaAmount: 1000000,
    hysaRate: 4.35,
    brokerageAmount: 1000000,
    brokerageReturn: 20,
    withdrawalRate: 4
  });
  
  const [years, setYears] = useState(20);

  const handleInputChange = (field, value) => {
    setInputs(prev => ({
      ...prev,
      [field]: parseFloat(value) || 0
    }));
  };

  const calculations = useMemo(() => {
    const { hysaAmount, hysaRate, brokerageAmount, brokerageReturn, withdrawalRate } = inputs;
    
    // Annual returns
    const annualHysaIncome = hysaAmount * (hysaRate / 100);
    const annualBrokerageIncome = brokerageAmount * (brokerageReturn / 100);
    const totalAnnualReturns = annualHysaIncome + annualBrokerageIncome;
    
    // Portfolio totals
    const totalPortfolio = hysaAmount + brokerageAmount;
    const annualWithdrawal = totalPortfolio * (withdrawalRate / 100);
    
    // Growth calculations
    const blendedReturn = (totalAnnualReturns / totalPortfolio) * 100;
    const netGrowthRate = blendedReturn - withdrawalRate;
    
    return {
      annualHysaIncome,
      annualBrokerageIncome,
      totalAnnualReturns,
      totalPortfolio,
      annualWithdrawal,
      blendedReturn,
      netGrowthRate
    };
  }, [inputs]);

  const projectionData = useMemo(() => {
    const data = [];
    let currentPortfolio = calculations.totalPortfolio;
    
    for (let year = 0; year <= years; year++) {
      if (year === 0) {
        data.push({
          year,
          portfolioValue: currentPortfolio,
          annualIncome: calculations.annualWithdrawal,
          cumulativeWithdrawals: 0
        });
      } else {
        // Calculate growth
        const returns = currentPortfolio * (calculations.blendedReturn / 100);
        const withdrawal = currentPortfolio * (inputs.withdrawalRate / 100);
        currentPortfolio = currentPortfolio + returns - withdrawal;
        
        data.push({
          year,
          portfolioValue: currentPortfolio,
          annualIncome: withdrawal,
          cumulativeWithdrawals: data[year-1].cumulativeWithdrawals + withdrawal
        });
      }
    }
    
    return data;
  }, [calculations, inputs.withdrawalRate, years]);

  const formatCurrency = (value) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(value);
  };

  const formatPercent = (value) => {
    return `${value.toFixed(2)}%`;
  };

  return (
    <div className="max-w-7xl mx-auto p-6 bg-gray-50 min-h-screen">
      <h1 className="text-3xl font-bold text-gray-800 mb-8">Portfolio Income & Growth Calculator</h1>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Input Panel */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">Portfolio Inputs</h2>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">HYSA Amount ($)</label>
              <input
                type="number"
                value={inputs.hysaAmount}
                onChange={(e) => handleInputChange('hysaAmount', e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">HYSA Interest Rate (%)</label>
              <input
                type="number"
                step="0.01"
                value={inputs.hysaRate}
                onChange={(e) => handleInputChange('hysaRate', e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Brokerage Amount ($)</label>
              <input
                type="number"
                value={inputs.brokerageAmount}
                onChange={(e) => handleInputChange('brokerageAmount', e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Brokerage Return (%)</label>
              <input
                type="number"
                step="0.01"
                value={inputs.brokerageReturn}
                onChange={(e) => handleInputChange('brokerageReturn', e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Withdrawal Rate (%)</label>
              <input
                type="number"
                step="0.01"
                value={inputs.withdrawalRate}
                onChange={(e) => handleInputChange('withdrawalRate', e.target.value)}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Years to Project</label>
              <input
                type="number"
                value={years}
                onChange={(e) => setYears(parseInt(e.target.value) || 20)}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
        </div>

        {/* Summary Panel */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">Key Metrics</h2>
          
          <div className="space-y-4">
            <div className="bg-blue-50 p-3 rounded-md">
              <p className="text-sm text-gray-600">Total Portfolio Value</p>
              <p className="text-lg font-semibold text-blue-600">{formatCurrency(calculations.totalPortfolio)}</p>
            </div>
            
            <div className="bg-green-50 p-3 rounded-md">
              <p className="text-sm text-gray-600">Annual Withdrawal</p>
              <p className="text-lg font-semibold text-green-600">{formatCurrency(calculations.annualWithdrawal)}</p>
            </div>
            
            <div className="bg-purple-50 p-3 rounded-md">
              <p className="text-sm text-gray-600">Blended Return Rate</p>
              <p className="text-lg font-semibold text-purple-600">{formatPercent(calculations.blendedReturn)}</p>
            </div>
            
            <div className="bg-orange-50 p-3 rounded-md">
              <p className="text-sm text-gray-600">Net Growth Rate</p>
              <p className="text-lg font-semibold text-orange-600">{formatPercent(calculations.netGrowthRate)}</p>
            </div>
            
            <div className="bg-gray-50 p-3 rounded-md">
              <p className="text-sm text-gray-600">HYSA Annual Income</p>
              <p className="text-md font-medium text-gray-700">{formatCurrency(calculations.annualHysaIncome)}</p>
            </div>
            
            <div className="bg-gray-50 p-3 rounded-md">
              <p className="text-sm text-gray-600">Brokerage Annual Income</p>
              <p className="text-md font-medium text-gray-700">{formatCurrency(calculations.annualBrokerageIncome)}</p>
            </div>
          </div>
        </div>

        {/* Future Value Preview */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">Future Projections</h2>
          
          <div className="space-y-4">
            {[5, 10, 15, 20].map(year => {
              const futureData = projectionData[year];
              if (!futureData) return null;
              
              return (
                <div key={year} className="border-l-4 border-blue-400 pl-3">
                  <p className="text-sm font-medium text-gray-700">Year {year}</p>
                  <p className="text-lg font-semibold text-blue-600">{formatCurrency(futureData.portfolioValue)}</p>
                  <p className="text-sm text-gray-500">Annual Income: {formatCurrency(futureData.annualIncome)}</p>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* Charts */}
      <div className="mt-8 grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Portfolio Growth Chart */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">Portfolio Value Over Time</h2>
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={projectionData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="year" />
              <YAxis tickFormatter={(value) => `$${(value / 1000000).toFixed(1)}M`} />
              <Tooltip formatter={(value) => [formatCurrency(value), 'Portfolio Value']} />
              <Legend />
              <Line 
                type="monotone" 
                dataKey="portfolioValue" 
                stroke="#2563eb" 
                strokeWidth={3}
                name="Portfolio Value"
              />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Annual Income Chart */}
        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">Annual Income Over Time</h2>
          <ResponsiveContainer width="100%" height={400}>
            <BarChart data={projectionData.filter(d => d.year <= 20 && d.year % 2 === 0)}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="year" />
              <YAxis tickFormatter={(value) => `$${(value / 1000).toFixed(0)}K`} />
              <Tooltip formatter={(value) => [formatCurrency(value), 'Annual Income']} />
              <Legend />
              <Bar dataKey="annualIncome" fill="#10b981" name="Annual Income" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
};

export default PortfolioCalculator;